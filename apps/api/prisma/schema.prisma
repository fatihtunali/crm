// Tour Operator CRM - Prisma Schema (PostgreSQL)
// Multi-tenant architecture

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ============================================
// TENANTS & USERS
// ============================================

model Tenant {
  id               Int      @id @default(autoincrement())
  name             String   @db.VarChar(255)
  code             String   @unique @db.VarChar(50)
  brandingLogoUrl  String?  @map("branding_logo_url") @db.VarChar(500)
  defaultCurrency  String   @default("EUR") @map("default_currency") @db.VarChar(3)
  taxId            String?  @map("tax_id") @db.VarChar(100)
  address          String?  @db.Text
  phone            String?  @db.VarChar(50)
  email            String?  @db.VarChar(255)
  isActive         Boolean  @default(true) @map("is_active")
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")

  // Relations
  users            User[]
  clients          Client[]
  leads            Lead[]
  tours            Tour[]
  itineraries      Itinerary[]
  vendors          Vendor[]
  vendorRates      VendorRate[]
  exchangeRates    ExchangeRate[]
  quotations       Quotation[]
  bookings         Booking[]
  bookingItems     BookingItem[]
  paymentsClient   PaymentClient[]
  paymentsVendor   PaymentVendor[]
  invoices         Invoice[]
  auditLogs        AuditLog[]

  @@index([code])
  @@index([isActive])
  @@map("tenants")
}

enum UserRole {
  OWNER
  ADMIN
  AGENT
  OPERATIONS
  ACCOUNTING
  GUIDE
  VENDOR
}

model User {
  id           Int       @id @default(autoincrement())
  tenantId     Int       @map("tenant_id")
  tenant       Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  name         String    @db.VarChar(255)
  email        String    @db.VarChar(255)
  passwordHash String    @map("password_hash") @db.VarChar(255)
  role         UserRole  @default(AGENT)
  phone        String?   @db.VarChar(50)
  isActive     Boolean   @default(true) @map("is_active")
  lastLoginAt  DateTime? @map("last_login_at")
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @updatedAt @map("updated_at")

  // Relations
  auditLogs AuditLog[]

  @@unique([tenantId, email])
  @@index([tenantId])
  @@index([email])
  @@index([role])
  @@map("users")
}

// ============================================
// CRM - CLIENTS & LEADS
// ============================================

model Client {
  id                 Int       @id @default(autoincrement())
  tenantId           Int       @map("tenant_id")
  tenant             Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  name               String    @db.VarChar(255)
  email              String?   @db.VarChar(255)
  phone              String?   @db.VarChar(50)
  nationality        String?   @db.VarChar(100)
  preferredLanguage  String    @default("en") @map("preferred_language") @db.VarChar(10)
  passportNumber     String?   @map("passport_number") @db.VarChar(50)
  dateOfBirth        DateTime? @map("date_of_birth") @db.Date
  notes              String?   @db.Text
  tags               String[]
  isActive           Boolean   @default(true) @map("is_active")
  createdAt          DateTime  @default(now()) @map("created_at")
  updatedAt          DateTime  @updatedAt @map("updated_at")

  // Relations
  leads    Lead[]
  bookings Booking[]

  @@index([tenantId])
  @@index([email])
  @@index([name])
  @@map("clients")
}

enum LeadStatus {
  NEW
  CONTACTED
  QUOTED
  WON
  LOST
}

model Lead {
  id           Int        @id @default(autoincrement())
  tenantId     Int        @map("tenant_id")
  tenant       Tenant     @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  clientId     Int?       @map("client_id")
  client       Client?    @relation(fields: [clientId], references: [id], onDelete: SetNull)
  source       String?    @db.VarChar(100)
  inquiryDate  DateTime   @map("inquiry_date")
  destination  String?    @db.VarChar(255)
  paxAdults    Int        @default(0) @map("pax_adults")
  paxChildren  Int        @default(0) @map("pax_children")
  budgetEur    Decimal?   @map("budget_eur") @db.Decimal(12, 2)
  status       LeadStatus @default(NEW)
  notes        String?    @db.Text
  createdAt    DateTime   @default(now()) @map("created_at")
  updatedAt    DateTime   @updatedAt @map("updated_at")

  // Relations
  quotations Quotation[]

  @@index([tenantId])
  @@index([clientId])
  @@index([status])
  @@index([inquiryDate])
  @@map("leads")
}

// ============================================
// TOURS
// ============================================

model Tour {
  id               Int       @id @default(autoincrement())
  tenantId         Int       @map("tenant_id")
  tenant           Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  code             String    @db.VarChar(50)
  name             String    @db.VarChar(255)
  description      String?   @db.Text
  baseCapacity     Int       @default(1) @map("base_capacity")
  seasonStart      DateTime? @map("season_start") @db.Date
  seasonEnd        DateTime? @map("season_end") @db.Date
  defaultMarkupPct Decimal   @default(25.00) @map("default_markup_pct") @db.Decimal(5, 2)
  isActive         Boolean   @default(true) @map("is_active")
  createdAt        DateTime  @default(now()) @map("created_at")
  updatedAt        DateTime  @updatedAt @map("updated_at")

  // Relations
  itineraries Itinerary[]
  quotations  Quotation[]

  @@unique([tenantId, code])
  @@index([tenantId])
  @@index([isActive])
  @@map("tours")
}

model Itinerary {
  id            Int      @id @default(autoincrement())
  tenantId      Int      @map("tenant_id")
  tenant        Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  tourId        Int      @map("tour_id")
  tour          Tour     @relation(fields: [tourId], references: [id], onDelete: Cascade)
  dayNumber     Int      @map("day_number")
  title         String   @db.VarChar(255)
  description   String?  @db.Text
  transport     String?  @db.VarChar(255)
  accommodation String?  @db.VarChar(255)
  meals         String?  @db.VarChar(255)
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  @@index([tenantId])
  @@index([tourId])
  @@index([dayNumber])
  @@map("itineraries")
}

// ============================================
// VENDORS
// ============================================

enum VendorType {
  HOTEL
  TRANSPORT
  GUIDE
  ACTIVITY
}

model Vendor {
  id          Int        @id @default(autoincrement())
  tenantId    Int        @map("tenant_id")
  tenant      Tenant     @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  name        String     @db.VarChar(255)
  type        VendorType
  contactName String?    @map("contact_name") @db.VarChar(255)
  phone       String?    @db.VarChar(50)
  email       String?    @db.VarChar(255)
  taxId       String?    @map("tax_id") @db.VarChar(100)
  address     String?    @db.Text
  notes       String?    @db.Text
  isActive    Boolean    @default(true) @map("is_active")
  createdAt   DateTime   @default(now()) @map("created_at")
  updatedAt   DateTime   @updatedAt @map("updated_at")

  // Relations
  rates          VendorRate[]
  bookingItems   BookingItem[]
  paymentsVendor PaymentVendor[]

  @@index([tenantId])
  @@index([type])
  @@index([isActive])
  @@map("vendors")
}

model VendorRate {
  id          Int      @id @default(autoincrement())
  tenantId    Int      @map("tenant_id")
  tenant      Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  vendorId    Int      @map("vendor_id")
  vendor      Vendor   @relation(fields: [vendorId], references: [id], onDelete: Cascade)
  seasonFrom  DateTime @map("season_from") @db.Date
  seasonTo    DateTime @map("season_to") @db.Date
  serviceType String   @map("service_type") @db.VarChar(100)
  costTry     Decimal  @map("cost_try") @db.Decimal(12, 2)
  notes       String?  @db.Text
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@index([tenantId])
  @@index([vendorId])
  @@index([seasonFrom, seasonTo])
  @@map("vendor_rates")
}

// ============================================
// EXCHANGE RATES
// ============================================

model ExchangeRate {
  id           Int      @id @default(autoincrement())
  tenantId     Int      @map("tenant_id")
  tenant       Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  fromCurrency String   @default("TRY") @map("from_currency") @db.VarChar(3)
  toCurrency   String   @default("EUR") @map("to_currency") @db.VarChar(3)
  rate         Decimal  @db.Decimal(10, 4)
  rateDate     DateTime @map("rate_date") @db.Date
  source       String   @default("manual") @db.VarChar(100)
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  @@unique([tenantId, fromCurrency, toCurrency, rateDate])
  @@index([tenantId])
  @@index([rateDate])
  @@map("exchange_rates")
}

// ============================================
// QUOTATIONS
// ============================================

enum QuotationStatus {
  DRAFT
  SENT
  ACCEPTED
  REJECTED
}

model Quotation {
  id               Int             @id @default(autoincrement())
  tenantId         Int             @map("tenant_id")
  tenant           Tenant          @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  leadId           Int?            @map("lead_id")
  lead             Lead?           @relation(fields: [leadId], references: [id], onDelete: SetNull)
  tourId           Int?            @map("tour_id")
  tour             Tour?           @relation(fields: [tourId], references: [id], onDelete: SetNull)
  customJson       Json?           @map("custom_json")
  calcCostTry      Decimal         @default(0) @map("calc_cost_try") @db.Decimal(12, 2)
  sellPriceEur     Decimal         @default(0) @map("sell_price_eur") @db.Decimal(12, 2)
  exchangeRateUsed Decimal         @map("exchange_rate_used") @db.Decimal(10, 4)
  validUntil       DateTime?       @map("valid_until")
  status           QuotationStatus @default(DRAFT)
  notes            String?         @db.Text
  createdAt        DateTime        @default(now()) @map("created_at")
  updatedAt        DateTime        @updatedAt @map("updated_at")

  // Relations
  bookings Booking[]

  @@index([tenantId])
  @@index([leadId])
  @@index([status])
  @@map("quotations")
}

// ============================================
// BOOKINGS
// ============================================

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}

model Booking {
  id                 Int           @id @default(autoincrement())
  tenantId           Int           @map("tenant_id")
  tenant             Tenant        @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  quotationId        Int?          @map("quotation_id")
  quotation          Quotation?    @relation(fields: [quotationId], references: [id], onDelete: SetNull)
  clientId           Int           @map("client_id")
  client             Client        @relation(fields: [clientId], references: [id], onDelete: Restrict)
  bookingCode        String        @map("booking_code") @db.VarChar(50)
  startDate          DateTime      @map("start_date") @db.Date
  endDate            DateTime      @map("end_date") @db.Date
  lockedExchangeRate Decimal       @map("locked_exchange_rate") @db.Decimal(10, 4)
  totalCostTry       Decimal       @default(0) @map("total_cost_try") @db.Decimal(12, 2)
  totalSellEur       Decimal       @default(0) @map("total_sell_eur") @db.Decimal(12, 2)
  depositDueEur      Decimal       @default(0) @map("deposit_due_eur") @db.Decimal(12, 2)
  balanceDueEur      Decimal       @default(0) @map("balance_due_eur") @db.Decimal(12, 2)
  status             BookingStatus @default(PENDING)
  notes              String?       @db.Text
  createdAt          DateTime      @default(now()) @map("created_at")
  updatedAt          DateTime      @updatedAt @map("updated_at")

  // Relations
  items          BookingItem[]
  paymentsClient PaymentClient[]
  paymentsVendor PaymentVendor[]
  invoices       Invoice[]

  @@unique([tenantId, bookingCode])
  @@index([tenantId])
  @@index([clientId])
  @@index([status])
  @@index([startDate, endDate])
  @@map("bookings")
}

enum ItemType {
  HOTEL
  TRANSFER
  GUIDE
  ACTIVITY
  FEE
  DISCOUNT
}

model BookingItem {
  id           Int      @id @default(autoincrement())
  tenantId     Int      @map("tenant_id")
  tenant       Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  bookingId    Int      @map("booking_id")
  booking      Booking  @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  itemType     ItemType @map("item_type")
  vendorId     Int?     @map("vendor_id")
  vendor       Vendor?  @relation(fields: [vendorId], references: [id], onDelete: SetNull)
  qty          Int      @default(1)
  unitCostTry  Decimal  @default(0) @map("unit_cost_try") @db.Decimal(12, 2)
  unitPriceEur Decimal  @default(0) @map("unit_price_eur") @db.Decimal(12, 2)
  notes        String?  @db.Text
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  @@index([tenantId])
  @@index([bookingId])
  @@index([vendorId])
  @@map("booking_items")
}

// ============================================
// PAYMENTS
// ============================================

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum PaymentMethod {
  CASH
  CREDIT_CARD
  BANK_TRANSFER
  ONLINE
  OTHER
}

model PaymentClient {
  id        Int           @id @default(autoincrement())
  tenantId  Int           @map("tenant_id")
  tenant    Tenant        @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  bookingId Int           @map("booking_id")
  booking   Booking       @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  amountEur Decimal       @map("amount_eur") @db.Decimal(12, 2)
  method    PaymentMethod
  paidAt    DateTime      @map("paid_at")
  txnRef    String?       @map("txn_ref") @db.VarChar(255)
  status    PaymentStatus @default(COMPLETED)
  notes     String?       @db.Text
  createdAt DateTime      @default(now()) @map("created_at")
  updatedAt DateTime      @updatedAt @map("updated_at")

  @@index([tenantId])
  @@index([bookingId])
  @@index([paidAt])
  @@map("payments_client")
}

model PaymentVendor {
  id        Int           @id @default(autoincrement())
  tenantId  Int           @map("tenant_id")
  tenant    Tenant        @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  bookingId Int           @map("booking_id")
  booking   Booking       @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  vendorId  Int           @map("vendor_id")
  vendor    Vendor        @relation(fields: [vendorId], references: [id], onDelete: Restrict)
  amountTry Decimal       @map("amount_try") @db.Decimal(12, 2)
  dueAt     DateTime      @map("due_at")
  paidAt    DateTime?     @map("paid_at")
  status    PaymentStatus @default(PENDING)
  notes     String?       @db.Text
  createdAt DateTime      @default(now()) @map("created_at")
  updatedAt DateTime      @updatedAt @map("updated_at")

  @@index([tenantId])
  @@index([bookingId])
  @@index([vendorId])
  @@index([dueAt])
  @@map("payments_vendor")
}

// ============================================
// INVOICES
// ============================================

model Invoice {
  id         Int      @id @default(autoincrement())
  tenantId   Int      @map("tenant_id")
  tenant     Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  bookingId  Int      @map("booking_id")
  booking    Booking  @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  number     String   @db.VarChar(100)
  issueDate  DateTime @map("issue_date") @db.Date
  currency   String   @default("EUR") @db.VarChar(3)
  netAmount  Decimal  @map("net_amount") @db.Decimal(12, 2)
  vatAmount  Decimal  @map("vat_amount") @db.Decimal(12, 2)
  grossAmount Decimal @map("gross_amount") @db.Decimal(12, 2)
  vatRate    Decimal  @default(20.00) @map("vat_rate") @db.Decimal(5, 2)
  pdfUrl     String?  @map("pdf_url") @db.VarChar(500)
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  @@unique([tenantId, number])
  @@index([tenantId])
  @@index([bookingId])
  @@index([issueDate])
  @@map("invoices")
}

// ============================================
// AUDIT LOGS
// ============================================

model AuditLog {
  id         Int      @id @default(autoincrement())
  tenantId   Int      @map("tenant_id")
  tenant     Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  userId     Int?     @map("user_id")
  user       User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  entity     String   @db.VarChar(100)
  entityId   Int      @map("entity_id")
  action     String   @db.VarChar(50)
  diffJson   Json?    @map("diff_json")
  ipAddress  String?  @map("ip_address") @db.VarChar(45)
  userAgent  String?  @map("user_agent") @db.Text
  createdAt  DateTime @default(now()) @map("created_at")

  @@index([tenantId])
  @@index([entity, entityId])
  @@index([userId])
  @@index([createdAt])
  @@map("audit_logs")
}
