// Tour Operator CRM - Prisma Schema (PostgreSQL)
// Multi-tenant architecture

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ============================================
// TENANTS & USERS
// ============================================

model Tenant {
  id               Int      @id @default(autoincrement())
  name             String   @db.VarChar(255)
  code             String   @unique @db.VarChar(50)
  brandingLogoUrl  String?  @map("branding_logo_url") @db.VarChar(500)
  defaultCurrency  String   @default("EUR") @map("default_currency") @db.VarChar(3)
  taxId            String?  @map("tax_id") @db.VarChar(100)
  address          String?  @db.Text
  phone            String?  @db.VarChar(50)
  email            String?  @db.VarChar(255)
  isActive         Boolean  @default(true) @map("is_active")
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")

  // Relations
  users            User[]
  clients          Client[]
  leads            Lead[]
  tours            Tour[]
  itineraries      Itinerary[]
  vendors          Vendor[]
  vendorRates      VendorRate[]
  exchangeRates    ExchangeRate[]
  quotations       Quotation[]
  bookings         Booking[]
  bookingItems     BookingItem[]
  paymentsClient   PaymentClient[]
  paymentsVendor   PaymentVendor[]
  invoices         Invoice[]
  auditLogs        AuditLog[]
  idempotencyKeys  IdempotencyKey[]
  files            File[]
  webhookEvents    WebhookEvent[]
  parties          Party[]
  suppliers        Supplier[]
  contacts         Contact[]
  serviceOfferings ServiceOffering[]
  hotelRoomRates   HotelRoomRate[]
  transferRates    TransferRate[]
  vehicleRates     VehicleRate[]
  guideRates       GuideRate[]
  activityRates    ActivityRate[]

  @@index([code])
  @@index([isActive])
  @@map("tenants")
}

enum UserRole {
  OWNER
  ADMIN
  AGENT
  OPERATIONS
  ACCOUNTING
  GUIDE
  VENDOR
}

model User {
  id                Int       @id @default(autoincrement())
  tenantId          Int       @map("tenant_id")
  tenant            Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  name              String    @db.VarChar(255)
  email             String    @db.VarChar(255)
  passwordHash      String    @map("password_hash") @db.VarChar(255)
  role              UserRole  @default(AGENT)
  phone             String?   @db.VarChar(50)
  preferredLanguage String    @default("en") @map("preferred_language") @db.VarChar(10)
  isActive          Boolean   @default(true) @map("is_active")
  lastLoginAt       DateTime? @map("last_login_at")
  createdAt         DateTime  @default(now()) @map("created_at")
  updatedAt         DateTime  @updatedAt @map("updated_at")

  // Relations
  auditLogs AuditLog[]

  @@unique([tenantId, email])
  @@index([tenantId])
  @@index([email])
  @@index([role])
  @@map("users")
}

// ============================================
// CRM - CLIENTS & LEADS
// ============================================

model Client {
  id                 Int       @id @default(autoincrement())
  tenantId           Int       @map("tenant_id")
  tenant             Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  name               String    @db.VarChar(255)
  email              String?   @db.VarChar(255)
  phone              String?   @db.VarChar(50)
  nationality        String?   @db.VarChar(100)
  preferredLanguage  String    @default("en") @map("preferred_language") @db.VarChar(10)
  passportNumber     String?   @map("passport_number") @db.VarChar(50)
  dateOfBirth        DateTime? @map("date_of_birth") @db.Date
  notes              String?   @db.Text
  tags               String[]
  isActive           Boolean   @default(true) @map("is_active")
  createdAt          DateTime  @default(now()) @map("created_at")
  updatedAt          DateTime  @updatedAt @map("updated_at")

  // Relations
  leads    Lead[]
  bookings Booking[]

  @@index([tenantId])
  @@index([email])
  @@index([name])
  @@map("clients")
}

enum LeadStatus {
  NEW
  CONTACTED
  QUOTED
  WON
  LOST
}

model Lead {
  id           Int        @id @default(autoincrement())
  tenantId     Int        @map("tenant_id")
  tenant       Tenant     @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  clientId     Int?       @map("client_id")
  client       Client?    @relation(fields: [clientId], references: [id], onDelete: SetNull)
  source       String?    @db.VarChar(100)
  inquiryDate  DateTime   @map("inquiry_date")
  destination  String?    @db.VarChar(255)
  paxAdults    Int        @default(0) @map("pax_adults")
  paxChildren  Int        @default(0) @map("pax_children")
  budgetEur    Decimal?   @map("budget_eur") @db.Decimal(12, 2)
  status       LeadStatus @default(NEW)
  notes        String?    @db.Text
  createdAt    DateTime   @default(now()) @map("created_at")
  updatedAt    DateTime   @updatedAt @map("updated_at")

  // Relations
  quotations Quotation[]

  @@index([tenantId])
  @@index([clientId])
  @@index([status])
  @@index([inquiryDate])
  @@map("leads")
}

// ============================================
// TOURS
// ============================================

model Tour {
  id               Int       @id @default(autoincrement())
  tenantId         Int       @map("tenant_id")
  tenant           Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  code             String    @db.VarChar(50)
  name             String    @db.VarChar(255)
  description      String?   @db.Text
  baseCapacity     Int       @default(1) @map("base_capacity")
  seasonStart      DateTime? @map("season_start") @db.Date
  seasonEnd        DateTime? @map("season_end") @db.Date
  defaultMarkupPct Decimal   @default(25.00) @map("default_markup_pct") @db.Decimal(5, 2)
  isActive         Boolean   @default(true) @map("is_active")
  createdAt        DateTime  @default(now()) @map("created_at")
  updatedAt        DateTime  @updatedAt @map("updated_at")

  // Relations
  itineraries Itinerary[]
  quotations  Quotation[]

  @@unique([tenantId, code])
  @@index([tenantId])
  @@index([isActive])
  @@map("tours")
}

model Itinerary {
  id            Int      @id @default(autoincrement())
  tenantId      Int      @map("tenant_id")
  tenant        Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  tourId        Int      @map("tour_id")
  tour          Tour     @relation(fields: [tourId], references: [id], onDelete: Cascade)
  dayNumber     Int      @map("day_number")
  title         String   @db.VarChar(255)
  description   String?  @db.Text
  transport     String?  @db.VarChar(255)
  accommodation String?  @db.VarChar(255)
  meals         String?  @db.VarChar(255)
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  @@index([tenantId])
  @@index([tourId])
  @@index([dayNumber])
  @@map("itineraries")
}

// ============================================
// SUPPLIER CATALOG SYSTEM
// ============================================

// Generic entity: name, tax_id, addresses, contacts
model Party {
  id        Int      @id @default(autoincrement())
  tenantId  Int      @map("tenant_id")
  tenant    Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  name      String   @db.VarChar(255)
  taxId     String?  @map("tax_id") @db.VarChar(100)
  address   String?  @db.Text
  city      String?  @db.VarChar(100)
  country   String?  @db.VarChar(100)
  notes     String?  @db.Text
  isActive  Boolean  @default(true) @map("is_active")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  contacts  Contact[]
  suppliers Supplier[]

  @@index([tenantId])
  @@index([name])
  @@index([isActive])
  @@map("parties")
}

// Contacts - many per party
model Contact {
  id          Int      @id @default(autoincrement())
  tenantId    Int      @map("tenant_id")
  tenant      Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  partyId     Int      @map("party_id")
  party       Party    @relation(fields: [partyId], references: [id], onDelete: Cascade)
  contactType String   @map("contact_type") @db.VarChar(50) // operations, accounting, sales, etc.
  name        String   @db.VarChar(255)
  email       String?  @db.VarChar(255)
  phone       String?  @db.VarChar(50)
  position    String?  @db.VarChar(100)
  isPrimary   Boolean  @default(false) @map("is_primary")
  isActive    Boolean  @default(true) @map("is_active")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@index([tenantId])
  @@index([partyId])
  @@index([contactType])
  @@map("contacts")
}

enum SupplierType {
  HOTEL
  TRANSPORT
  ACTIVITY_OPERATOR
  GUIDE_AGENCY
  OTHER
}

// Suppliers - subset of parties that sell to you
model Supplier {
  id              Int          @id @default(autoincrement())
  tenantId        Int          @map("tenant_id")
  tenant          Tenant       @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  partyId         Int          @map("party_id")
  party           Party        @relation(fields: [partyId], references: [id], onDelete: Cascade)
  type            SupplierType
  bankName        String?      @map("bank_name") @db.VarChar(255)
  bankAccountNo   String?      @map("bank_account_no") @db.VarChar(100)
  bankIban        String?      @map("bank_iban") @db.VarChar(100)
  bankSwift       String?      @map("bank_swift") @db.VarChar(50)
  paymentTerms    String?      @map("payment_terms") @db.VarChar(255)
  defaultCurrency String       @default("TRY") @map("default_currency") @db.VarChar(3)
  creditLimit     Decimal?     @map("credit_limit") @db.Decimal(12, 2)
  commissionPct   Decimal      @default(0) @map("commission_pct") @db.Decimal(5, 2)
  isActive        Boolean      @default(true) @map("is_active")
  createdAt       DateTime     @default(now()) @map("created_at")
  updatedAt       DateTime     @updatedAt @map("updated_at")

  // Relations
  serviceOfferings ServiceOffering[]

  @@unique([tenantId, partyId])
  @@index([tenantId])
  @@index([partyId])
  @@index([type])
  @@index([isActive])
  @@map("suppliers")
}

enum ServiceType {
  HOTEL_ROOM
  TRANSFER
  VEHICLE_HIRE
  GUIDE_SERVICE
  ACTIVITY
}

// Service offerings - the catalog index (what's available)
model ServiceOffering {
  id          Int         @id @default(autoincrement())
  tenantId    Int         @map("tenant_id")
  tenant      Tenant      @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  supplierId  Int         @map("supplier_id")
  supplier    Supplier    @relation(fields: [supplierId], references: [id], onDelete: Cascade)
  serviceType ServiceType @map("service_type")
  title       String      @db.VarChar(255)
  location    String?     @db.VarChar(255)
  description String?     @db.Text
  isActive    Boolean     @default(true) @map("is_active")
  createdAt   DateTime    @default(now()) @map("created_at")
  updatedAt   DateTime    @updatedAt @map("updated_at")

  // Relations to type-specific details (one-to-one)
  hotelRoom    HotelRoom?
  transfer     Transfer?
  vehicle      Vehicle?
  guide        Guide?
  activity     Activity?
  bookingItems BookingItem[]

  // Relations to rate cards (one-to-many)
  hotelRoomRates HotelRoomRate[]
  transferRates  TransferRate[]
  vehicleRates   VehicleRate[]
  guideRates     GuideRate[]
  activityRates  ActivityRate[]

  @@index([tenantId])
  @@index([supplierId])
  @@index([serviceType])
  @@index([isActive])
  @@index([location])
  @@map("service_offerings")
}

// ============================================
// HOTEL ROOMS (Type-specific detail)
// ============================================

enum BoardType {
  RO // Room Only
  BB // Bed & Breakfast
  HB // Half Board
  FB // Full Board
  AI // All Inclusive
}

model HotelRoom {
  serviceOfferingId Int      @id @map("service_offering_id")
  serviceOffering   ServiceOffering @relation(fields: [serviceOfferingId], references: [id], onDelete: Cascade)
  hotelName         String   @map("hotel_name") @db.VarChar(255)
  stars             Int?     // 1-5 stars
  address           String?  @db.Text
  city              String?  @db.VarChar(100)
  country           String?  @db.VarChar(100)
  geo               String?  @db.VarChar(100) // e.g., "41.0082,28.9784"
  roomType          String   @map("room_type") @db.VarChar(100) // DBL, TWN, TRP, SUITE, etc.
  maxOccupancy      Int      @default(2) @map("max_occupancy")
  boardTypes        Json?    @map("board_types") // Available board types: ["BB", "HB", "FB", "AI"]
  amenities         Json?    // ["wifi", "pool", "spa", "parking"]
  checkInTime       String?  @map("check_in_time") @db.VarChar(10) // e.g., "14:00"
  checkOutTime      String?  @map("check_out_time") @db.VarChar(10) // e.g., "11:00"
  cancellationPolicy String? @map("cancellation_policy") @db.Text
  notes             String?  @db.Text
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")

  @@map("hotel_rooms")
}

enum PricingModel {
  PER_ROOM_NIGHT
  PER_PERSON_NIGHT
  PER_TRANSFER
  PER_KM
  PER_HOUR
  PER_DAY
  PER_HALF_DAY
  PER_PERSON
  PER_GROUP
}

model HotelRoomRate {
  id                  Int           @id @default(autoincrement())
  tenantId            Int           @map("tenant_id")
  tenant              Tenant        @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  serviceOfferingId   Int           @map("service_offering_id")
  serviceOffering     ServiceOffering @relation(fields: [serviceOfferingId], references: [id], onDelete: Cascade)
  seasonFrom          DateTime      @map("season_from") @db.Date
  seasonTo            DateTime      @map("season_to") @db.Date
  pricingModel        PricingModel  @default(PER_ROOM_NIGHT) @map("pricing_model")
  boardType           BoardType     @map("board_type")
  occupancyAdults     Int           @default(2) @map("occupancy_adults")
  occupancyChildren   Int           @default(0) @map("occupancy_children")
  costTry             Decimal       @map("cost_try") @db.Decimal(12, 2)
  childPolicyJson     Json?         @map("child_policy_json") // e.g., {"age_0_2": "free", "age_3_6": "50%"}
  allotment           Int?          // Number of rooms contracted
  releaseDays         Int?          @map("release_days") // Days before check-in to release
  minStay             Int?          @default(1) @map("min_stay")
  notes               String?       @db.Text
  isActive            Boolean       @default(true) @map("is_active")
  createdAt           DateTime      @default(now()) @map("created_at")
  updatedAt           DateTime      @updatedAt @map("updated_at")

  @@index([tenantId])
  @@index([serviceOfferingId])
  @@index([seasonFrom, seasonTo])
  @@index([boardType])
  @@index([isActive])
  @@map("hotel_room_rates")
}

// ============================================
// TRANSFERS (Type-specific detail)
// ============================================

enum TransferType {
  PRIVATE
  SHARED
  SHUTTLE
}

model Transfer {
  serviceOfferingId Int          @id @map("service_offering_id")
  serviceOffering   ServiceOffering @relation(fields: [serviceOfferingId], references: [id], onDelete: Cascade)
  originZone        String       @map("origin_zone") @db.VarChar(255)
  destZone          String       @map("dest_zone") @db.VarChar(255)
  transferType      TransferType @map("transfer_type")
  vehicleClass      String       @map("vehicle_class") @db.VarChar(100) // sedan, van, minibus, coach
  capacity          Int          @default(4) // Number of passengers
  meetGreet         Boolean      @default(false) @map("meet_greet")
  luggageAllowance  String?      @map("luggage_allowance") @db.VarChar(100)
  duration          Int?         @db.Integer // Estimated duration in minutes
  distance          Decimal?     @db.Decimal(8, 2) // Distance in km
  notes             String?      @db.Text
  createdAt         DateTime     @default(now()) @map("created_at")
  updatedAt         DateTime     @updatedAt @map("updated_at")

  @@map("transfers")
}

model TransferRate {
  id                  Int             @id @default(autoincrement())
  tenantId            Int             @map("tenant_id")
  tenant              Tenant          @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  serviceOfferingId   Int             @map("service_offering_id")
  serviceOffering     ServiceOffering @relation(fields: [serviceOfferingId], references: [id], onDelete: Cascade)
  seasonFrom          DateTime        @map("season_from") @db.Date
  seasonTo            DateTime        @map("season_to") @db.Date
  pricingModel        PricingModel    @default(PER_TRANSFER) @map("pricing_model")
  baseCostTry         Decimal         @map("base_cost_try") @db.Decimal(12, 2)
  includedKm          Decimal?        @map("included_km") @db.Decimal(8, 2)
  includedHours       Decimal?        @map("included_hours") @db.Decimal(5, 2)
  extraKmTry          Decimal?        @map("extra_km_try") @db.Decimal(8, 2)
  extraHourTry        Decimal?        @map("extra_hour_try") @db.Decimal(8, 2)
  nightSurchargePct   Decimal         @default(0) @map("night_surcharge_pct") @db.Decimal(5, 2)
  holidaySurchargePct Decimal         @default(0) @map("holiday_surcharge_pct") @db.Decimal(5, 2)
  waitingTimeFree     Int?            @default(0) @map("waiting_time_free") // Free waiting minutes
  notes               String?         @db.Text
  isActive            Boolean         @default(true) @map("is_active")
  createdAt           DateTime        @default(now()) @map("created_at")
  updatedAt           DateTime        @updatedAt @map("updated_at")

  @@index([tenantId])
  @@index([serviceOfferingId])
  @@index([seasonFrom, seasonTo])
  @@index([isActive])
  @@map("transfer_rates")
}

// ============================================
// VEHICLES (Type-specific detail)
// ============================================

model Vehicle {
  serviceOfferingId Int             @id @map("service_offering_id")
  serviceOffering   ServiceOffering @relation(fields: [serviceOfferingId], references: [id], onDelete: Cascade)
  make              String          @db.VarChar(100)
  model             String          @db.VarChar(100)
  year              Int?
  plateNumber       String?         @map("plate_number") @db.VarChar(50)
  seats             Int             @default(5)
  vehicleClass      String          @map("vehicle_class") @db.VarChar(100) // economy, comfort, luxury, SUV, van
  transmission      String?         @db.VarChar(50) // automatic, manual
  fuelType          String?         @map("fuel_type") @db.VarChar(50) // petrol, diesel, electric, hybrid
  withDriver        Boolean         @default(false) @map("with_driver")
  features          Json?           // ["GPS", "child_seat", "wifi", "AC"]
  insuranceIncluded Boolean         @default(true) @map("insurance_included")
  notes             String?         @db.Text
  createdAt         DateTime        @default(now()) @map("created_at")
  updatedAt         DateTime        @updatedAt @map("updated_at")

  @@map("vehicles")
}

model VehicleRate {
  id                Int             @id @default(autoincrement())
  tenantId          Int             @map("tenant_id")
  tenant            Tenant          @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  serviceOfferingId Int             @map("service_offering_id")
  serviceOffering   ServiceOffering @relation(fields: [serviceOfferingId], references: [id], onDelete: Cascade)
  seasonFrom        DateTime        @map("season_from") @db.Date
  seasonTo          DateTime        @map("season_to") @db.Date
  pricingModel      PricingModel    @default(PER_DAY) @map("pricing_model")
  baseCostTry       Decimal         @map("base_cost_try") @db.Decimal(12, 2)
  dailyKmIncluded   Decimal?        @map("daily_km_included") @db.Decimal(8, 2)
  extraKmTry        Decimal?        @map("extra_km_try") @db.Decimal(8, 2)
  driverDailyTry    Decimal?        @map("driver_daily_try") @db.Decimal(8, 2) // If with driver
  oneWayFeeTry      Decimal?        @map("one_way_fee_try") @db.Decimal(8, 2)
  depositTry        Decimal?        @map("deposit_try") @db.Decimal(12, 2)
  minRentalDays     Int?            @default(1) @map("min_rental_days")
  notes             String?         @db.Text
  isActive          Boolean         @default(true) @map("is_active")
  createdAt         DateTime        @default(now()) @map("created_at")
  updatedAt         DateTime        @updatedAt @map("updated_at")

  @@index([tenantId])
  @@index([serviceOfferingId])
  @@index([seasonFrom, seasonTo])
  @@index([isActive])
  @@map("vehicle_rates")
}

// ============================================
// GUIDES (Type-specific detail)
// ============================================

model Guide {
  serviceOfferingId Int             @id @map("service_offering_id")
  serviceOffering   ServiceOffering @relation(fields: [serviceOfferingId], references: [id], onDelete: Cascade)
  guideName         String          @map("guide_name") @db.VarChar(255)
  licenseNo         String?         @map("license_no") @db.VarChar(100)
  languages         Json            // ["English", "Turkish", "Spanish"]
  regions           Json?           // ["Istanbul", "Cappadocia", "Ephesus"]
  specializations   Json?           // ["historical", "adventure", "culinary"]
  maxGroupSize      Int?            @default(20) @map("max_group_size")
  rating            Decimal?        @db.Decimal(3, 2) // e.g., 4.85
  phone             String?         @db.VarChar(50)
  email             String?         @db.VarChar(255)
  notes             String?         @db.Text
  createdAt         DateTime        @default(now()) @map("created_at")
  updatedAt         DateTime        @updatedAt @map("updated_at")

  @@map("guides")
}

model GuideRate {
  id                  Int             @id @default(autoincrement())
  tenantId            Int             @map("tenant_id")
  tenant              Tenant          @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  serviceOfferingId   Int             @map("service_offering_id")
  serviceOffering     ServiceOffering @relation(fields: [serviceOfferingId], references: [id], onDelete: Cascade)
  seasonFrom          DateTime        @map("season_from") @db.Date
  seasonTo            DateTime        @map("season_to") @db.Date
  pricingModel        PricingModel    @default(PER_DAY) @map("pricing_model")
  dayCostTry          Decimal?        @map("day_cost_try") @db.Decimal(12, 2)
  halfDayCostTry      Decimal?        @map("half_day_cost_try") @db.Decimal(12, 2)
  hourCostTry         Decimal?        @map("hour_cost_try") @db.Decimal(12, 2)
  overtimeHourTry     Decimal?        @map("overtime_hour_try") @db.Decimal(12, 2)
  holidaySurchargePct Decimal         @default(0) @map("holiday_surcharge_pct") @db.Decimal(5, 2)
  minHours            Int?            @default(4) @map("min_hours")
  notes               String?         @db.Text
  isActive            Boolean         @default(true) @map("is_active")
  createdAt           DateTime        @default(now()) @map("created_at")
  updatedAt           DateTime        @updatedAt @map("updated_at")

  @@index([tenantId])
  @@index([serviceOfferingId])
  @@index([seasonFrom, seasonTo])
  @@index([isActive])
  @@map("guide_rates")
}

// ============================================
// ACTIVITIES (Type-specific detail)
// ============================================

model Activity {
  serviceOfferingId Int             @id @map("service_offering_id")
  serviceOffering   ServiceOffering @relation(fields: [serviceOfferingId], references: [id], onDelete: Cascade)
  operatorName      String          @map("operator_name") @db.VarChar(255)
  activityType      String          @map("activity_type") @db.VarChar(100) // tour, attraction, experience
  durationMinutes   Int?            @map("duration_minutes")
  capacity          Int?            // Maximum participants
  minAge            Int?            @map("min_age")
  maxAge            Int?            @map("max_age")
  difficulty        String?         @db.VarChar(50) // easy, moderate, difficult
  includedItems     Json?           @map("included_items") // ["entrance", "guide", "lunch", "equipment"]
  meetingPoint      String?         @map("meeting_point") @db.Text
  pickupAvailable   Boolean         @default(false) @map("pickup_available")
  cancellationPolicy String?        @map("cancellation_policy") @db.Text
  notes             String?         @db.Text
  createdAt         DateTime        @default(now()) @map("created_at")
  updatedAt         DateTime        @updatedAt @map("updated_at")

  @@map("activities")
}

model ActivityRate {
  id                  Int             @id @default(autoincrement())
  tenantId            Int             @map("tenant_id")
  tenant              Tenant          @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  serviceOfferingId   Int             @map("service_offering_id")
  serviceOffering     ServiceOffering @relation(fields: [serviceOfferingId], references: [id], onDelete: Cascade)
  seasonFrom          DateTime        @map("season_from") @db.Date
  seasonTo            DateTime        @map("season_to") @db.Date
  pricingModel        PricingModel    @default(PER_PERSON) @map("pricing_model")
  baseCostTry         Decimal         @map("base_cost_try") @db.Decimal(12, 2)
  minPax              Int?            @default(1) @map("min_pax")
  maxPax              Int?            @map("max_pax")
  tieredPricingJson   Json?           @map("tiered_pricing_json") // {"1-4": 100, "5-8": 80, "9+": 70}
  childDiscountPct    Decimal?        @default(0) @map("child_discount_pct") @db.Decimal(5, 2)
  groupDiscountPct    Decimal?        @default(0) @map("group_discount_pct") @db.Decimal(5, 2)
  notes               String?         @db.Text
  isActive            Boolean         @default(true) @map("is_active")
  createdAt           DateTime        @default(now()) @map("created_at")
  updatedAt           DateTime        @updatedAt @map("updated_at")

  @@index([tenantId])
  @@index([serviceOfferingId])
  @@index([seasonFrom, seasonTo])
  @@index([isActive])
  @@map("activity_rates")
}

// ============================================
// LEGACY VENDORS (TO BE DEPRECATED)
// ============================================

enum VendorType {
  HOTEL
  TRANSPORT
  GUIDE
  ACTIVITY
}

model Vendor {
  id          Int        @id @default(autoincrement())
  tenantId    Int        @map("tenant_id")
  tenant      Tenant     @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  name        String     @db.VarChar(255)
  type        VendorType
  contactName String?    @map("contact_name") @db.VarChar(255)
  phone       String?    @db.VarChar(50)
  email       String?    @db.VarChar(255)
  taxId       String?    @map("tax_id") @db.VarChar(100)
  address     String?    @db.Text
  notes       String?    @db.Text
  isActive    Boolean    @default(true) @map("is_active")
  createdAt   DateTime   @default(now()) @map("created_at")
  updatedAt   DateTime   @updatedAt @map("updated_at")

  // Relations
  rates          VendorRate[]
  bookingItems   BookingItem[]
  paymentsVendor PaymentVendor[]

  @@index([tenantId])
  @@index([type])
  @@index([isActive])
  @@map("vendors")
}

model VendorRate {
  id          Int      @id @default(autoincrement())
  tenantId    Int      @map("tenant_id")
  tenant      Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  vendorId    Int      @map("vendor_id")
  vendor      Vendor   @relation(fields: [vendorId], references: [id], onDelete: Cascade)
  seasonFrom  DateTime @map("season_from") @db.Date
  seasonTo    DateTime @map("season_to") @db.Date
  serviceType String   @map("service_type") @db.VarChar(100)
  costTry     Decimal  @map("cost_try") @db.Decimal(12, 2)
  notes       String?  @db.Text
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@index([tenantId])
  @@index([vendorId])
  @@index([seasonFrom, seasonTo])
  @@map("vendor_rates")
}

// ============================================
// EXCHANGE RATES
// ============================================

model ExchangeRate {
  id           Int      @id @default(autoincrement())
  tenantId     Int      @map("tenant_id")
  tenant       Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  fromCurrency String   @default("TRY") @map("from_currency") @db.VarChar(3)
  toCurrency   String   @default("EUR") @map("to_currency") @db.VarChar(3)
  rate         Decimal  @db.Decimal(10, 4)
  rateDate     DateTime @map("rate_date") @db.Date
  source       String   @default("manual") @db.VarChar(100)
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  @@unique([tenantId, fromCurrency, toCurrency, rateDate])
  @@index([tenantId])
  @@index([rateDate])
  @@map("exchange_rates")
}

// ============================================
// QUOTATIONS
// ============================================

enum QuotationStatus {
  DRAFT
  SENT
  ACCEPTED
  REJECTED
}

model Quotation {
  id               Int             @id @default(autoincrement())
  tenantId         Int             @map("tenant_id")
  tenant           Tenant          @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  leadId           Int?            @map("lead_id")
  lead             Lead?           @relation(fields: [leadId], references: [id], onDelete: SetNull)
  tourId           Int?            @map("tour_id")
  tour             Tour?           @relation(fields: [tourId], references: [id], onDelete: SetNull)
  customJson       Json?           @map("custom_json")
  calcCostTry      Decimal         @default(0) @map("calc_cost_try") @db.Decimal(12, 2)
  sellPriceEur     Decimal         @default(0) @map("sell_price_eur") @db.Decimal(12, 2)
  exchangeRateUsed Decimal         @map("exchange_rate_used") @db.Decimal(10, 4)
  validUntil       DateTime?       @map("valid_until")
  status           QuotationStatus @default(DRAFT)
  notes            String?         @db.Text
  createdAt        DateTime        @default(now()) @map("created_at")
  updatedAt        DateTime        @updatedAt @map("updated_at")

  // Relations
  bookings Booking[]

  @@index([tenantId])
  @@index([leadId])
  @@index([status])
  @@map("quotations")
}

// ============================================
// BOOKINGS
// ============================================

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}

model Booking {
  id                 Int           @id @default(autoincrement())
  tenantId           Int           @map("tenant_id")
  tenant             Tenant        @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  quotationId        Int?          @map("quotation_id")
  quotation          Quotation?    @relation(fields: [quotationId], references: [id], onDelete: SetNull)
  clientId           Int           @map("client_id")
  client             Client        @relation(fields: [clientId], references: [id], onDelete: Restrict)
  bookingCode        String        @map("booking_code") @db.VarChar(50)
  startDate          DateTime      @map("start_date") @db.Date
  endDate            DateTime      @map("end_date") @db.Date
  lockedExchangeRate Decimal       @map("locked_exchange_rate") @db.Decimal(10, 4)
  totalCostTry       Decimal       @default(0) @map("total_cost_try") @db.Decimal(12, 2)
  totalSellEur       Decimal       @default(0) @map("total_sell_eur") @db.Decimal(12, 2)
  depositDueEur      Decimal       @default(0) @map("deposit_due_eur") @db.Decimal(12, 2)
  balanceDueEur      Decimal       @default(0) @map("balance_due_eur") @db.Decimal(12, 2)
  status             BookingStatus @default(PENDING)
  notes              String?       @db.Text
  createdAt          DateTime      @default(now()) @map("created_at")
  updatedAt          DateTime      @updatedAt @map("updated_at")

  // Relations
  items          BookingItem[]
  paymentsClient PaymentClient[]
  paymentsVendor PaymentVendor[]
  invoices       Invoice[]

  @@unique([tenantId, bookingCode])
  @@index([tenantId])
  @@index([clientId])
  @@index([status])
  @@index([startDate, endDate])
  @@map("bookings")
}

enum ItemType {
  HOTEL
  TRANSFER
  GUIDE
  ACTIVITY
  FEE
  DISCOUNT
}

model BookingItem {
  id                  Int              @id @default(autoincrement())
  tenantId            Int              @map("tenant_id")
  tenant              Tenant           @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  bookingId           Int              @map("booking_id")
  booking             Booking          @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  itemType            ItemType         @map("item_type")

  // Legacy vendor reference (deprecated, kept for backward compatibility)
  vendorId            Int?             @map("vendor_id")
  vendor              Vendor?          @relation(fields: [vendorId], references: [id], onDelete: SetNull)

  // New catalog reference
  serviceOfferingId   Int?             @map("service_offering_id")
  serviceOffering     ServiceOffering? @relation(fields: [serviceOfferingId], references: [id], onDelete: SetNull)

  qty                 Int              @default(1)
  unitCostTry         Decimal          @default(0) @map("unit_cost_try") @db.Decimal(12, 2)
  unitPriceEur        Decimal          @default(0) @map("unit_price_eur") @db.Decimal(12, 2)

  // Pricing snapshot to freeze details at booking time
  pricingSnapshotJson Json?            @map("pricing_snapshot_json")

  notes               String?          @db.Text
  createdAt           DateTime         @default(now()) @map("created_at")
  updatedAt           DateTime         @updatedAt @map("updated_at")

  @@index([tenantId])
  @@index([bookingId])
  @@index([vendorId])
  @@index([serviceOfferingId])
  @@map("booking_items")
}

// ============================================
// PAYMENTS
// ============================================

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum PaymentMethod {
  CASH
  CREDIT_CARD
  BANK_TRANSFER
  ONLINE
  OTHER
}

model PaymentClient {
  id        Int           @id @default(autoincrement())
  tenantId  Int           @map("tenant_id")
  tenant    Tenant        @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  bookingId Int           @map("booking_id")
  booking   Booking       @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  amountEur Decimal       @map("amount_eur") @db.Decimal(12, 2)
  method    PaymentMethod
  paidAt    DateTime      @map("paid_at")
  txnRef    String?       @map("txn_ref") @db.VarChar(255)
  status    PaymentStatus @default(COMPLETED)
  notes     String?       @db.Text
  createdAt DateTime      @default(now()) @map("created_at")
  updatedAt DateTime      @updatedAt @map("updated_at")

  @@index([tenantId])
  @@index([bookingId])
  @@index([paidAt])
  @@map("payments_client")
}

model PaymentVendor {
  id        Int           @id @default(autoincrement())
  tenantId  Int           @map("tenant_id")
  tenant    Tenant        @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  bookingId Int           @map("booking_id")
  booking   Booking       @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  vendorId  Int           @map("vendor_id")
  vendor    Vendor        @relation(fields: [vendorId], references: [id], onDelete: Restrict)
  amountTry Decimal       @map("amount_try") @db.Decimal(12, 2)
  dueAt     DateTime      @map("due_at")
  paidAt    DateTime?     @map("paid_at")
  status    PaymentStatus @default(PENDING)
  notes     String?       @db.Text
  createdAt DateTime      @default(now()) @map("created_at")
  updatedAt DateTime      @updatedAt @map("updated_at")

  @@index([tenantId])
  @@index([bookingId])
  @@index([vendorId])
  @@index([dueAt])
  @@map("payments_vendor")
}

// ============================================
// INVOICES
// ============================================

model Invoice {
  id         Int      @id @default(autoincrement())
  tenantId   Int      @map("tenant_id")
  tenant     Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  bookingId  Int      @map("booking_id")
  booking    Booking  @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  number     String   @db.VarChar(100)
  issueDate  DateTime @map("issue_date") @db.Date
  currency   String   @default("EUR") @db.VarChar(3)
  netAmount  Decimal  @map("net_amount") @db.Decimal(12, 2)
  vatAmount  Decimal  @map("vat_amount") @db.Decimal(12, 2)
  grossAmount Decimal @map("gross_amount") @db.Decimal(12, 2)
  vatRate    Decimal  @default(20.00) @map("vat_rate") @db.Decimal(5, 2)
  pdfUrl     String?  @map("pdf_url") @db.VarChar(500)
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  @@unique([tenantId, number])
  @@index([tenantId])
  @@index([bookingId])
  @@index([issueDate])
  @@map("invoices")
}

// ============================================
// AUDIT LOGS
// ============================================

model AuditLog {
  id         Int      @id @default(autoincrement())
  tenantId   Int      @map("tenant_id")
  tenant     Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  userId     Int?     @map("user_id")
  user       User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  entity     String   @db.VarChar(100)
  entityId   Int      @map("entity_id")
  action     String   @db.VarChar(50)
  diffJson   Json?    @map("diff_json")
  ipAddress  String?  @map("ip_address") @db.VarChar(45)
  userAgent  String?  @map("user_agent") @db.Text
  createdAt  DateTime @default(now()) @map("created_at")

  @@index([tenantId])
  @@index([entity, entityId])
  @@index([userId])
  @@index([createdAt])
  @@map("audit_logs")
}

// ============================================
// IDEMPOTENCY
// ============================================

model IdempotencyKey {
  id             Int      @id @default(autoincrement())
  tenantId       Int      @map("tenant_id")
  tenant         Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  key            String   @db.VarChar(255)
  requestPath    String   @map("request_path") @db.VarChar(255)
  requestMethod  String   @map("request_method") @db.VarChar(10)
  requestBody    Json?    @map("request_body")
  responseStatus Int      @map("response_status")
  responseBody   Json     @map("response_body")
  createdAt      DateTime @default(now()) @map("created_at")
  expiresAt      DateTime @map("expires_at")

  @@unique([tenantId, key])
  @@index([tenantId])
  @@index([expiresAt])
  @@map("idempotency_keys")
}

// ============================================
// FILE STORAGE
// ============================================

enum FileStatus {
  PENDING
  UPLOADED
  FAILED
}

model File {
  id           Int        @id @default(autoincrement())
  tenantId     Int        @map("tenant_id")
  tenant       Tenant     @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  userId       Int?       @map("user_id")
  fileName     String     @map("file_name") @db.VarChar(255)
  originalName String     @map("original_name") @db.VarChar(255)
  mimeType     String     @map("mime_type") @db.VarChar(100)
  fileSize     Int        @map("file_size")
  storageKey   String     @map("storage_key") @db.VarChar(500)
  url          String?    @db.VarChar(1000)
  entity       String?    @db.VarChar(100)
  entityId     Int?       @map("entity_id")
  status       FileStatus @default(PENDING)
  uploadedAt   DateTime?  @map("uploaded_at")
  createdAt    DateTime   @default(now()) @map("created_at")
  updatedAt    DateTime   @updatedAt @map("updated_at")

  @@index([tenantId])
  @@index([entity, entityId])
  @@index([userId])
  @@index([status])
  @@map("files")
}

// ============================================
// WEBHOOKS
// ============================================

enum WebhookEventStatus {
  PENDING
  PROCESSING
  SUCCESS
  FAILED
  RETRY
}

enum WebhookEventType {
  PAYMENT_SUCCESS
  PAYMENT_FAILED
  PAYMENT_PENDING
  REFUND_PROCESSED
  REFUND_FAILED
}

model WebhookEvent {
  id              Int                @id @default(autoincrement())
  tenantId        Int                @map("tenant_id")
  tenant          Tenant             @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  provider        String             @db.VarChar(100)
  eventType       WebhookEventType   @map("event_type")
  status          WebhookEventStatus @default(PENDING)
  payloadJson     Json               @map("payload_json")
  signatureHeader String?            @map("signature_header") @db.VarChar(500)
  isVerified      Boolean            @default(false) @map("is_verified")
  processedAt     DateTime?          @map("processed_at")
  errorMessage    String?            @map("error_message") @db.Text
  retryCount      Int                @default(0) @map("retry_count")
  ipAddress       String?            @map("ip_address") @db.VarChar(45)
  userAgent       String?            @map("user_agent") @db.Text
  createdAt       DateTime           @default(now()) @map("created_at")
  updatedAt       DateTime           @updatedAt @map("updated_at")

  @@index([tenantId])
  @@index([provider])
  @@index([eventType])
  @@index([status])
  @@index([createdAt])
  @@map("webhook_events")
}
