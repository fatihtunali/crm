// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ============================================
// AUTHENTICATION MODELS
// ============================================

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String // bcrypt hash
  firstName String   @map("first_name")
  lastName  String   @map("last_name")
  role      UserRole @default(OPERATOR)
  isActive  Boolean  @default(true) @map("is_active")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("users")
}

enum UserRole {
  SUPER_ADMIN // Tüm yetkilere sahip, sistem yöneticisi
  ADMIN // Yönetici
  OPERATOR // Operasyon yöneticisi
  ACCOUNTING // Muhasebe
  SALES // Satış
}

// ============================================
// RESOURCE MANAGEMENT MODELS
// ============================================

// Otel Yönetimi
model Hotel {
  id            Int      @id @default(autoincrement())
  name          String
  address       String
  city          String
  country       String   @default("Turkey")
  phone         String?
  email         String?
  stars         Int? // 1-5 yıldız
  contactPerson String?  @map("contact_person")
  facilities    String[] // ["Pool", "Spa", "WiFi", "Restaurant"]
  notes         String?  @db.Text
  isActive      Boolean  @default(true) @map("is_active")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  createdBy Int      @map("created_by")

  // Relations
  pricings HotelPricing[]
  reservationDays ReservationDay[]

  @@index([city])
  @@index([isActive])
  @@map("hotels")
}

// Otel Fiyatlandırma (Sezonsal)
model HotelPricing {
  id      Int   @id @default(autoincrement())
  hotelId Int   @map("hotel_id")
  hotel   Hotel @relation(fields: [hotelId], references: [id], onDelete: Cascade)

  seasonName String   @map("season_name") // "Yaz Sezonu", "Kış Sezonu", "Bayram"
  startDate  DateTime @map("start_date")
  endDate    DateTime @map("end_date")

  // Oda Tipleri Fiyatları (per person)
  doubleRoomPrice  Decimal @map("double_room_price") @db.Decimal(10, 2) // Per person in Double Room
  singleSupplement Decimal @map("single_supplement") @db.Decimal(10, 2) // Single Supplement
  tripleRoomPrice  Decimal @map("triple_room_price") @db.Decimal(10, 2) // Per person in Triple Room

  // Çocuk Yaş Grupları (% indirim veya sabit fiyat)
  child0to2Price  Decimal @map("child_0_to_2_price") @db.Decimal(10, 2) // 0-2.99 yaş
  child3to5Price  Decimal @map("child_3_to_5_price") @db.Decimal(10, 2) // 3-5.99 yaş
  child6to11Price Decimal @map("child_6_to_11_price") @db.Decimal(10, 2) // 6-11.99 yaş

  notes    String? @db.Text
  isActive Boolean @default(true) @map("is_active")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  createdBy Int      @map("created_by")

  @@index([hotelId])
  @@index([startDate, endDate])
  @@index([isActive])
  @@map("hotel_pricings")
}

// Araç Yönetimi
model Vehicle {
  id       Int         @id @default(autoincrement())
  plate    String      @unique // Plaka numarası
  brand    String // Marka (Mercedes, Ford, etc.)
  model    String // Model
  year     Int? // Yıl
  type     VehicleType // Araç tipi
  capacity Int // Kapasite (kişi)
  color    String? // Renk

  driverName  String? @map("driver_name")
  driverPhone String? @map("driver_phone")

  insuranceExpiry DateTime? @map("insurance_expiry")
  maintenanceDate DateTime? @map("maintenance_date")

  notes    String? @db.Text
  isActive Boolean @default(true) @map("is_active")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  createdBy Int      @map("created_by")

  @@index([type])
  @@index([isActive])
  @@map("vehicles")
}

enum VehicleType {
  VITO // Vito (max 4 pax)
  SPRINTER // Sprinter (max 12 pax)
  ISUZU // Isuzu (max 20 pax)
  COACH // Coach (max 46 pax)
  CAR // Araba (3-4 kişi)
  VAN // Minivan (6-8 kişi)
  MINIBUS // Minibüs (14-16 kişi)
  MIDIBUS // Midibüs (25-30 kişi)
  BUS // Otobüs (45-50 kişi)
  LUXURY // Lüks araç
}

// Rehber Yönetimi
model Guide {
  id              Int      @id @default(autoincrement())
  firstName       String   @map("first_name")
  lastName        String   @map("last_name")
  phone           String
  email           String?
  languages       String[] // ["TR", "EN", "DE", "RU", "AR"]
  specializations String[] // ["History", "Museums", "Nature"]
  licenseNumber   String?  @map("license_number")
  dailyRate       Decimal? @map("daily_rate") @db.Decimal(10, 2) // Deprecated - use GuidePricing
  commission      Decimal? @db.Decimal(5, 2) // Yüzde
  rating          Decimal? @db.Decimal(3, 2) // 0-5

  notes    String? @db.Text
  isActive Boolean @default(true) @map("is_active")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  createdBy Int      @map("created_by")

  // Relations
  pricings GuidePricing[]
  reservationDays ReservationDay[]

  @@index([isActive])
  @@map("guides")
}

// Rehber Fiyatlandırma (Şehir, Dil, Kullanım Tipi, Sezon bazlı)
model GuidePricing {
  id      Int   @id @default(autoincrement())
  guideId Int   @map("guide_id")
  guide   Guide @relation(fields: [guideId], references: [id], onDelete: Cascade)

  city        String // Şehir (Istanbul, Cappadocia, Antalya...)
  serviceType GuideServiceType @map("service_type") // Tam gün, Yarım gün, Transfer, Gece

  // Sezonsal bilgiler
  seasonName String   @map("season_name") // "Yaz Sezonu", "Kış Sezonu", "Bayram"
  startDate  DateTime @map("start_date")
  endDate    DateTime @map("end_date")

  price    Decimal @db.Decimal(10, 2)
  currency String  @default("EUR")

  notes    String? @db.Text
  isActive Boolean @default(true) @map("is_active")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  createdBy Int      @map("created_by")

  @@index([guideId])
  @@index([city])
  @@index([serviceType])
  @@index([startDate, endDate])
  @@index([isActive])
  @@map("guide_pricings")
}

enum GuideServiceType {
  FULL_DAY      // Tam Gün (8-10 saat)
  HALF_DAY      // Yarım Gün (4-5 saat)
  TRANSFER      // Transfer (Havaalanı karşılama vb.)
  NIGHT_SERVICE // Gece Kullanımı (Yemek, eğlence)
  PACKAGE_TOUR  // Paket Tur (günlük fiyat)
}

// Tedarikçi Yönetimi
model Supplier {
  id            Int          @id @default(autoincrement())
  name          String
  type          SupplierType
  address       String?
  city          String?
  phone         String?
  email         String?
  contactPerson String?      @map("contact_person")
  taxNumber     String?      @map("tax_number")

  notes    String? @db.Text
  isActive Boolean @default(true) @map("is_active")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  createdBy Int      @map("created_by")

  // Relations
  entranceFees        EntranceFeePricing[]
  supplierPricings    SupplierPricing[]
  reservationActivities ReservationActivity[]

  @@index([type])
  @@index([isActive])
  @@map("suppliers")
}

enum SupplierType {
  RESTAURANT    // Restoran
  MUSEUM        // Müze
  ACTIVITY      // Aktivite (balon, dalış vb.)
  OTHER         // Diğer
}

// Giriş Ücretleri (Müzeler, Antik Kentler, Turistik Mekanlar)
model EntranceFeePricing {
  id         Int      @id @default(autoincrement())
  supplierId Int      @map("supplier_id")
  supplier   Supplier @relation(fields: [supplierId], references: [id], onDelete: Cascade)

  city String // Şehir

  // Sezon bilgileri
  seasonName String   @map("season_name")
  startDate  DateTime @map("start_date")
  endDate    DateTime @map("end_date")

  // Fiyat kategorileri (per person)
  adultPrice      Decimal @map("adult_price") @db.Decimal(10, 2)
  child0to6Price  Decimal @map("child_0_to_6_price") @db.Decimal(10, 2)
  child7to12Price Decimal @map("child_7_to_12_price") @db.Decimal(10, 2)
  studentPrice    Decimal @map("student_price") @db.Decimal(10, 2)

  currency String @default("EUR")
  notes    String? @db.Text
  isActive Boolean @default(true) @map("is_active")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  createdBy Int      @map("created_by")

  @@index([supplierId])
  @@index([city])
  @@index([startDate, endDate])
  @@index([isActive])
  @@map("entrance_fee_pricings")
}

// Tedarikçi Hizmet Fiyatlandırması (Restoranlar, Aktiviteler, vb.)
model SupplierPricing {
  id         Int      @id @default(autoincrement())
  supplierId Int      @map("supplier_id")
  supplier   Supplier @relation(fields: [supplierId], references: [id], onDelete: Cascade)

  city        String              // Şehir
  serviceType SupplierServiceType @map("service_type")

  // Sezon bilgileri
  seasonName String   @map("season_name")
  startDate  DateTime @map("start_date")
  endDate    DateTime @map("end_date")

  price    Decimal @db.Decimal(10, 2) // Per person
  currency String  @default("EUR")

  notes    String? @db.Text
  isActive Boolean @default(true) @map("is_active")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  createdBy Int      @map("created_by")

  @@index([supplierId])
  @@index([city])
  @@index([serviceType])
  @@index([startDate, endDate])
  @@index([isActive])
  @@map("supplier_pricings")
}

enum SupplierServiceType {
  BREAKFAST // Kahvaltı
  LUNCH     // Öğle yemeği
  DINNER    // Akşam yemeği
  ACTIVITY  // Aktivite (balon, dalış, vs.)
  OTHER     // Diğer hizmetler
}

// Araç Tedarikçisi (Transfer & Allocation)
model VehicleSupplier {
  id            Int     @id @default(autoincrement())
  name          String
  contactPerson String? @map("contact_person")
  phone         String?
  email         String?
  address       String?
  city          String?
  taxNumber     String? @map("tax_number")

  notes    String? @db.Text
  isActive Boolean @default(true) @map("is_active")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  createdBy Int      @map("created_by")

  // Relations
  transferPricings   TransferPricing[]
  allocationPricings VehicleAllocationPricing[]

  @@index([isActive])
  @@map("vehicle_suppliers")
}

// Transfer Fiyatlandırma (Airport-Hotel, City-City)
model TransferPricing {
  id         Int             @id @default(autoincrement())
  supplierId Int             @map("supplier_id")
  supplier   VehicleSupplier @relation(fields: [supplierId], references: [id], onDelete: Cascade)

  vehicleType  VehicleType @map("vehicle_type")
  fromLocation String      @map("from_location") // "Istanbul Airport", "Hotel", "Antalya"
  toLocation   String      @map("to_location") // "Hotel", "Istanbul Airport", "Cappadocia"
  fromCity     String      @map("from_city") // Şehir dropdown'dan
  toCity       String      @map("to_city") // Şehir dropdown'dan

  // Sezonsal bilgiler (optional for backwards compatibility)
  seasonName String?   @map("season_name") // "Yaz Sezonu", "Kış Sezonu", "Bayram"
  startDate  DateTime? @map("start_date")
  endDate    DateTime? @map("end_date")

  price    Decimal @db.Decimal(10, 2)
  currency String  @default("EUR")

  notes    String? @db.Text
  isActive Boolean @default(true) @map("is_active")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  createdBy Int      @map("created_by")

  @@index([supplierId])
  @@index([vehicleType])
  @@index([fromCity, toCity])
  @@index([startDate, endDate])
  @@index([isActive])
  @@map("transfer_pricings")
}

// Araç Tahsis Fiyatlandırma (Disposal - Tam Gün, Yarım Gün, Gece, Paket Tur)
model VehicleAllocationPricing {
  id         Int             @id @default(autoincrement())
  supplierId Int             @map("supplier_id")
  supplier   VehicleSupplier @relation(fields: [supplierId], references: [id], onDelete: Cascade)

  vehicleType    VehicleType    @map("vehicle_type")
  city           String // Şehir
  allocationType AllocationType @map("allocation_type")

  // Sezonsal bilgiler (optional for backwards compatibility)
  seasonName String?   @map("season_name") // "Yaz Sezonu", "Kış Sezonu", "Bayram"
  startDate  DateTime? @map("start_date")
  endDate    DateTime? @map("end_date")

  // Günlük kullanım için (FULL_DAY, HALF_DAY, NIGHT_SERVICE)
  basePrice      Decimal? @map("base_price") @db.Decimal(10, 2) // Ana fiyat
  baseHours      Int?     @map("base_hours") // Kaç saat (8, 4, vs)
  extraHourPrice Decimal? @map("extra_hour_price") @db.Decimal(10, 2) // Ekstra saat fiyatı

  // Paket tur için (PACKAGE_TOUR)
  packageDays   Int?     @map("package_days") // Kaç gün (7, 10, 15, 20...)
  packagePrice  Decimal? @map("package_price") @db.Decimal(10, 2) // Paket toplam fiyat
  extraDayPrice Decimal? @map("extra_day_price") @db.Decimal(10, 2) // Ekstra gün fiyatı

  currency String @default("EUR")

  notes    String? @db.Text
  isActive Boolean @default(true) @map("is_active")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  createdBy Int      @map("created_by")

  @@index([supplierId])
  @@index([vehicleType])
  @@index([city])
  @@index([allocationType])
  @@index([startDate, endDate])
  @@index([isActive])
  @@map("vehicle_allocation_pricings")
}

enum AllocationType {
  FULL_DAY // Tam Gün (8 saat)
  HALF_DAY // Yarım Gün (4 saat)
  NIGHT_SERVICE // Gece Kullanımı (18:00 sonrası)
  PACKAGE_TOUR // Paket Tur (7 gün, 10 gün, 15 gün...)
}

// ============================================
// CUSTOMER MANAGEMENT (B2B + B2C)
// ============================================

// Acenteler (B2B - Travel Agencies, Tour Operators)
model Agent {
  id            Int      @id @default(autoincrement())
  companyName   String   @map("company_name")
  taxNumber     String?  @map("tax_number")
  contactPerson String   @map("contact_person")
  email         String
  phone         String
  address       String?
  city          String?
  country       String?  @default("Turkey")

  // İş Koşulları
  paymentTerms   String?   @map("payment_terms") // "30 days", "60 days", "Prepaid"
  creditLimit    Decimal?  @map("credit_limit") @db.Decimal(10, 2)
  commissionRate Decimal?  @map("commission_rate") @db.Decimal(5, 2) // % komisyon
  contractStart  DateTime? @map("contract_start")
  contractEnd    DateTime? @map("contract_end")

  notes    String?  @db.Text
  isActive Boolean  @default(true) @map("is_active")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  createdBy Int      @map("created_by")

  // Relations
  customers      Customer[]
  contactHistory AgentContactHistory[]

  @@index([isActive])
  @@index([companyName])
  @@map("agents")
}

// Acente İletişim Geçmişi
model AgentContactHistory {
  id      Int   @id @default(autoincrement())
  agentId Int   @map("agent_id")
  agent   Agent @relation(fields: [agentId], references: [id], onDelete: Cascade)

  contactType ContactType @map("contact_type")
  subject     String
  notes       String      @db.Text
  contactDate DateTime    @map("contact_date") @default(now())

  createdBy Int      @map("created_by")
  createdAt DateTime @default(now()) @map("created_at")

  @@index([agentId])
  @@index([contactDate])
  @@map("agent_contact_history")
}

// Müşteriler (Hem B2B acente müşterileri, hem de B2C direkt müşteriler)
model Customer {
  id Int @id @default(autoincrement())

  // B2B Bağlantısı (NULL ise B2C - direkt müşteri)
  agentId Int?   @map("agent_id")
  agent   Agent? @relation(fields: [agentId], references: [id], onDelete: SetNull)

  // Kişisel Bilgiler
  firstName String @map("first_name")
  lastName  String @map("last_name")
  email     String
  phone     String

  dateOfBirth    DateTime? @map("date_of_birth")
  nationality    String?
  passportNumber String?   @map("passport_number")
  passportExpiry DateTime? @map("passport_expiry")

  // Adres
  address String?
  city    String?
  country String? @default("Turkey")

  // Seyahat Tercihleri
  preferences      Json?   // {"dietary": "vegetarian", "accessibility": "wheelchair"}
  emergencyContact String? @map("emergency_contact")
  emergencyPhone   String? @map("emergency_phone")

  // Pazarlama & Sadakat (genelde B2C için)
  marketingConsent Boolean @default(false) @map("marketing_consent")
  loyaltyPoints    Int     @default(0) @map("loyalty_points")

  notes    String?  @db.Text
  tags     String[] // ["VIP", "Repeat", "Family", "Solo"]
  isActive Boolean  @default(true) @map("is_active")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  createdBy Int      @map("created_by")

  // Relations
  contactHistory CustomerContactHistory[]
  reservations   Reservation[]

  @@index([agentId])
  @@index([isActive])
  @@index([email])
  @@map("customers")
}

// Müşteri İletişim Geçmişi
model CustomerContactHistory {
  id         Int      @id @default(autoincrement())
  customerId Int      @map("customer_id")
  customer   Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)

  contactType ContactType @map("contact_type")
  subject     String
  notes       String      @db.Text
  contactDate DateTime    @map("contact_date") @default(now())

  createdBy Int      @map("created_by")
  createdAt DateTime @default(now()) @map("created_at")

  @@index([customerId])
  @@index([contactDate])
  @@map("customer_contact_history")
}

enum ContactType {
  PHONE
  EMAIL
  WHATSAPP
  MEETING
  OTHER
}

// ============================================
// RESERVATION MANAGEMENT
// ============================================

// Ana Rezervasyon
model Reservation {
  id               Int      @id @default(autoincrement())
  reservationCode  String   @unique @map("reservation_code") // REZ-2025-001

  // Müşteri Bilgisi (B2B veya B2C)
  customerId       Int      @map("customer_id")
  customer         Customer @relation(fields: [customerId], references: [id])

  // Tarih Bilgileri
  startDate        DateTime @map("start_date")
  endDate          DateTime @map("end_date")
  totalDays        Int      @map("total_days")

  // Durum
  status           ReservationStatus @default(PENDING)

  // Fiyat Bilgileri
  totalCost        Decimal  @map("total_cost") @db.Decimal(10, 2)       // Toplam maliyet
  totalPrice       Decimal  @map("total_price") @db.Decimal(10, 2)      // Satış fiyatı
  profit           Decimal  @db.Decimal(10, 2)                           // Kar
  currency         String   @default("EUR")

  // Ödeme Bilgileri
  paidAmount       Decimal  @default(0) @map("paid_amount") @db.Decimal(10, 2)
  remainingAmount  Decimal  @default(0) @map("remaining_amount") @db.Decimal(10, 2)

  // Katılımcı Sayıları
  adultCount       Int      @default(0) @map("adult_count")
  childCount       Int      @default(0) @map("child_count")

  notes            String?  @db.Text
  internalNotes    String?  @map("internal_notes") @db.Text

  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")
  createdBy        Int      @map("created_by")

  // Relations
  days             ReservationDay[]
  participants     ReservationParticipant[]
  payments         Payment[]

  @@index([customerId])
  @@index([status])
  @@index([startDate, endDate])
  @@index([reservationCode])
  @@map("reservations")
}

enum ReservationStatus {
  PENDING    // Beklemede (teklif)
  CONFIRMED  // Onaylandı
  CANCELLED  // İptal edildi
  COMPLETED  // Tamamlandı
}

// Rezervasyon Günlük Detayları (Itinerary)
model ReservationDay {
  id            Int         @id @default(autoincrement())
  reservationId Int         @map("reservation_id")
  reservation   Reservation @relation(fields: [reservationId], references: [id], onDelete: Cascade)

  dayNumber     Int         @map("day_number") // 1, 2, 3...
  date          DateTime

  // Otel
  hotelId       Int?        @map("hotel_id")
  hotel         Hotel?      @relation(fields: [hotelId], references: [id])
  roomType      RoomType?   @map("room_type")

  // Araç/Transfer
  transferType  String?     @map("transfer_type") // "Airport Pickup", "City Transfer", "Full Day"
  vehicleType   VehicleType? @map("vehicle_type")

  // Rehber
  guideId       Int?        @map("guide_id")
  guide         Guide?      @relation(fields: [guideId], references: [id])
  guideService  GuideServiceType? @map("guide_service")

  // Yemekler
  breakfast     Boolean     @default(false)
  lunch         Boolean     @default(false)
  dinner        Boolean     @default(false)

  // Günlük maliyet ve satış
  dayCost       Decimal     @default(0) @map("day_cost") @db.Decimal(10, 2)
  dayPrice      Decimal     @default(0) @map("day_price") @db.Decimal(10, 2)

  description   String?     @db.Text // "Visit Ephesus Ancient City"
  notes         String?     @db.Text

  createdAt     DateTime    @default(now()) @map("created_at")
  updatedAt     DateTime    @updatedAt @map("updated_at")

  // Relations
  activities    ReservationActivity[]

  @@index([reservationId])
  @@index([date])
  @@map("reservation_days")
}

enum RoomType {
  SINGLE
  DOUBLE
  TRIPLE
  FAMILY
}

// Günlük Aktiviteler (Müze, Antik Kent, vb.)
model ReservationActivity {
  id              Int            @id @default(autoincrement())
  reservationDayId Int           @map("reservation_day_id")
  reservationDay  ReservationDay @relation(fields: [reservationDayId], references: [id], onDelete: Cascade)

  activityType    ActivityType   @map("activity_type")
  supplierId      Int?           @map("supplier_id")
  supplier        Supplier?      @relation(fields: [supplierId], references: [id])

  name            String         // "Ephesus Museum Entry"
  cost            Decimal        @db.Decimal(10, 2)
  price           Decimal        @db.Decimal(10, 2)

  notes           String?        @db.Text

  createdAt       DateTime       @default(now()) @map("created_at")

  @@index([reservationDayId])
  @@map("reservation_activities")
}

enum ActivityType {
  ENTRANCE_FEE  // Giriş ücreti (müze, antik kent)
  MEAL          // Yemek
  ACTIVITY      // Aktivite (balon, dalış)
  OTHER         // Diğer
}

// Rezervasyon Katılımcıları
model ReservationParticipant {
  id            Int         @id @default(autoincrement())
  reservationId Int         @map("reservation_id")
  reservation   Reservation @relation(fields: [reservationId], references: [id], onDelete: Cascade)

  participantType ParticipantType @map("participant_type")
  age           Int?        // Çocuklar için
  firstName     String      @map("first_name")
  lastName      String      @map("last_name")

  createdAt     DateTime    @default(now()) @map("created_at")

  @@index([reservationId])
  @@map("reservation_participants")
}

enum ParticipantType {
  ADULT
  CHILD_0_2
  CHILD_3_5
  CHILD_6_11
  STUDENT
}

// Ödemeler
model Payment {
  id            Int         @id @default(autoincrement())
  reservationId Int         @map("reservation_id")
  reservation   Reservation @relation(fields: [reservationId], references: [id], onDelete: Cascade)

  amount        Decimal     @db.Decimal(10, 2)
  currency      String      @default("EUR")
  paymentMethod PaymentMethod @map("payment_method")
  paymentDate   DateTime    @map("payment_date") @default(now())

  notes         String?     @db.Text

  createdAt     DateTime    @default(now()) @map("created_at")
  createdBy     Int         @map("created_by")

  @@index([reservationId])
  @@index([paymentDate])
  @@map("payments")
}

enum PaymentMethod {
  CASH
  CREDIT_CARD
  BANK_TRANSFER
  ONLINE
  OTHER
}
